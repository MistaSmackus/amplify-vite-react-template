type PurchasedStock {
  id: ID!
  symbol: String!
  quantity: Int!
  price: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type WatchStock {
  id: ID!
  symbol: String!
  lastPrice: Float!
  change: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPurchasedStockConnection {
  items: [PurchasedStock]!
  nextToken: String
}

input ModelPurchasedStockFilterInput {
  id: ModelIDInput
  symbol: ModelStringInput
  quantity: ModelIntInput
  price: ModelFloatInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPurchasedStockFilterInput]
  or: [ModelPurchasedStockFilterInput]
  not: ModelPurchasedStockFilterInput
}

type Query {
  getPurchasedStock(id: ID!): PurchasedStock
  listPurchasedStocks(filter: ModelPurchasedStockFilterInput, limit: Int, nextToken: String): ModelPurchasedStockConnection
  getWatchStock(id: ID!): WatchStock
  listWatchStocks(filter: ModelWatchStockFilterInput, limit: Int, nextToken: String): ModelWatchStockConnection
}

input ModelPurchasedStockConditionInput {
  symbol: ModelStringInput
  quantity: ModelIntInput
  price: ModelFloatInput
  and: [ModelPurchasedStockConditionInput]
  or: [ModelPurchasedStockConditionInput]
  not: ModelPurchasedStockConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePurchasedStockInput {
  id: ID
  symbol: String!
  quantity: Int!
  price: Float!
}

input UpdatePurchasedStockInput {
  id: ID!
  symbol: String
  quantity: Int
  price: Float
}

input DeletePurchasedStockInput {
  id: ID!
}

type Mutation {
  createPurchasedStock(input: CreatePurchasedStockInput!, condition: ModelPurchasedStockConditionInput): PurchasedStock
  updatePurchasedStock(input: UpdatePurchasedStockInput!, condition: ModelPurchasedStockConditionInput): PurchasedStock
  deletePurchasedStock(input: DeletePurchasedStockInput!, condition: ModelPurchasedStockConditionInput): PurchasedStock
  createWatchStock(input: CreateWatchStockInput!, condition: ModelWatchStockConditionInput): WatchStock
  updateWatchStock(input: UpdateWatchStockInput!, condition: ModelWatchStockConditionInput): WatchStock
  deleteWatchStock(input: DeleteWatchStockInput!, condition: ModelWatchStockConditionInput): WatchStock
}

input ModelSubscriptionPurchasedStockFilterInput {
  id: ModelSubscriptionIDInput
  symbol: ModelSubscriptionStringInput
  quantity: ModelSubscriptionIntInput
  price: ModelSubscriptionFloatInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPurchasedStockFilterInput]
  or: [ModelSubscriptionPurchasedStockFilterInput]
}

type Subscription {
  onCreatePurchasedStock(filter: ModelSubscriptionPurchasedStockFilterInput): PurchasedStock @aws_subscribe(mutations: ["createPurchasedStock"])
  onUpdatePurchasedStock(filter: ModelSubscriptionPurchasedStockFilterInput): PurchasedStock @aws_subscribe(mutations: ["updatePurchasedStock"])
  onDeletePurchasedStock(filter: ModelSubscriptionPurchasedStockFilterInput): PurchasedStock @aws_subscribe(mutations: ["deletePurchasedStock"])
  onCreateWatchStock(filter: ModelSubscriptionWatchStockFilterInput): WatchStock @aws_subscribe(mutations: ["createWatchStock"])
  onUpdateWatchStock(filter: ModelSubscriptionWatchStockFilterInput): WatchStock @aws_subscribe(mutations: ["updateWatchStock"])
  onDeleteWatchStock(filter: ModelSubscriptionWatchStockFilterInput): WatchStock @aws_subscribe(mutations: ["deleteWatchStock"])
}

type ModelWatchStockConnection {
  items: [WatchStock]!
  nextToken: String
}

input ModelWatchStockFilterInput {
  id: ModelIDInput
  symbol: ModelStringInput
  lastPrice: ModelFloatInput
  change: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelWatchStockFilterInput]
  or: [ModelWatchStockFilterInput]
  not: ModelWatchStockFilterInput
}

input ModelWatchStockConditionInput {
  symbol: ModelStringInput
  lastPrice: ModelFloatInput
  change: ModelStringInput
  and: [ModelWatchStockConditionInput]
  or: [ModelWatchStockConditionInput]
  not: ModelWatchStockConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateWatchStockInput {
  id: ID
  symbol: String!
  lastPrice: Float!
  change: String!
}

input UpdateWatchStockInput {
  id: ID!
  symbol: String
  lastPrice: Float
  change: String
}

input DeleteWatchStockInput {
  id: ID!
}

input ModelSubscriptionWatchStockFilterInput {
  id: ModelSubscriptionIDInput
  symbol: ModelSubscriptionStringInput
  lastPrice: ModelSubscriptionFloatInput
  change: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionWatchStockFilterInput]
  or: [ModelSubscriptionWatchStockFilterInput]
}
